import asyncio
from telethon import TelegramClient, events
from telethon.tl.types import KeyboardButtonUrl, Channel
from telethon.sessions import StringSession
from telethon.tl.functions.channels import JoinChannelRequest
from telethon.tl.functions.messages import ImportChatInviteRequest
from telethon.errors import FloodWaitError
import re
import sys

# –°–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤
first_bot_username = '@StarsEarnRubot'  # –ü–µ—Ä–≤—ã–π –±–æ—Ç
second_bot_username = '@StarsovEarnBot'  # –í—Ç–æ—Ä–æ–π –±–æ—Ç
third_bot_username = '@Farm_FreeStars_bot'  # –¢—Ä–µ—Ç–∏–π –±–æ—Ç

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
account_results = []
processed_accounts = set()
# –°–ª–æ–≤–∞—Ä—å –∑–∞–º–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ api_id
account_locks = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
def read_credentials(file_path="INFA.txt"):
    credentials = []
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            lines = file.readlines()
            current_cred = {}
            for line in lines:
                line = line.strip()
                if not line:
                    if current_cred:
                        credentials.append(current_cred)
                        current_cred = {}
                    continue
                if line.startswith('@'):
                    continue  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ —Å @username
                if '=' in line:
                    key, value = map(str.strip, line.split('=', 1))
                    current_cred[key] = value.strip('"')
            if current_cred:
                credentials.append(current_cred)
        return credentials
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        return []

async def process_account(api_id, api_hash, session_string):
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—Ç—Ä–æ–∫–∏ —Å–µ—Å—Å–∏–∏
    client = TelegramClient(StringSession(session_string), api_id, api_hash)
    try:
        await client.start()
        print(f"–ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ —Å api_id: {api_id}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ —Å api_id: {api_id}: {e}")
        return None, None, None, None

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–º–∫–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ api_id
    if api_id not in account_locks:
        account_locks[api_id] = asyncio.Lock()

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç —Å –ø–µ—Ä–≤—ã–º –±–æ—Ç–æ–º
    try:
        first_bot = await client.get_entity(first_bot_username)
        print(f"–ß–∞—Ç —Å –ø–µ—Ä–≤—ã–º –±–æ—Ç–æ–º –æ—Ç–∫—Ä—ã—Ç: {first_bot.username} (ID: {first_bot.id})")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —á–∞—Ç–∞ —Å –ø–µ—Ä–≤—ã–º –±–æ—Ç–æ–º ({first_bot_username}): {e}")
        await client.disconnect()
        return None, None, None, None

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç —Å–æ –≤—Ç–æ—Ä—ã–º –±–æ—Ç–æ–º
    try:
        second_bot = await client.get_entity(second_bot_username)
        print(f"–ß–∞—Ç —Å –≤—Ç–æ—Ä—ã–º –±–æ—Ç–æ–º –æ—Ç–∫—Ä—ã—Ç: {second_bot.username} (ID: {second_bot.id})")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —á–∞—Ç–∞ —Å –≤—Ç–æ—Ä—ã–º –±–æ—Ç–æ–º ({second_bot_username}): {e}")
        await client.disconnect()
        return None, None, None, None

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç —Å —Ç—Ä–µ—Ç—å–∏–º –±–æ—Ç–æ–º
    try:
        third_bot = await client.get_entity(third_bot_username)
        print(f"–ß–∞—Ç —Å —Ç—Ä–µ—Ç—å–∏–º –±–æ—Ç–æ–º –æ—Ç–∫—Ä—ã—Ç: {third_bot.username} (ID: {third_bot.id})")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —á–∞—Ç–∞ —Å —Ç—Ä–µ—Ç—å–∏–º –±–æ—Ç–æ–º ({third_bot_username}): {e}")
        await client.disconnect()
        return None, None, None, None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ —Å –ø–µ—Ä–≤—ã–º –±–æ—Ç–æ–º
    try:
        print("–ü—Ä–æ–≤–µ—Ä—è—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ —Å –ø–µ—Ä–≤—ã–º –±–æ—Ç–æ–º...")
        async for message in client.iter_messages(first_bot, limit=5):
            print(f"–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –±–æ—Ç–∞: {message.text} (ID: {message.id})")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –±–æ—Ç–∞: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–Ω–∏–π
    try:
        await client.send_message(first_bot, "üìã –ó–∞–¥–∞–Ω–∏—è")
        print("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ 'üìã –ó–∞–¥–∞–Ω–∏—è' –ø–µ—Ä–≤–æ–º—É –±–æ—Ç—É")
        await client.send_message(second_bot, "üíé –ó–∞–¥–∞–Ω–∏—è")
        print("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ 'üíé –ó–∞–¥–∞–Ω–∏—è' –≤—Ç–æ—Ä–æ–º—É –±–æ—Ç—É")
        await client.send_message(third_bot, "üìã –ó–∞–¥–∞–Ω–∏—è")
        print("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ 'üìã –ó–∞–¥–∞–Ω–∏—è' —Ç—Ä–µ—Ç—å–µ–º—É –±–æ—Ç—É")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞–º: {e}")
        await client.disconnect()
        return None, None, None, None

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –±–æ—Ç–æ–≤
    @client.on(events.NewMessage(chats=[first_bot, second_bot, third_bot]))
    async def log_all_messages(event):
        bot_name = "–ø–µ—Ä–≤–æ–≥–æ –±–æ—Ç–∞" if event.chat_id == first_bot.id else "–≤—Ç–æ—Ä–æ–≥–æ –±–æ—Ç–∞" if event.chat_id == second_bot.id else "—Ç—Ä–µ—Ç—å–µ–≥–æ –±–æ—Ç–∞"
        print(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {bot_name}: {event.message.text} (ID: {event.message.id})")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –±–æ—Ç–æ–≤
    @client.on(events.MessageEdited(chats=[first_bot, second_bot, third_bot]))
    async def handle_edited_message(event):
        bot_name = "–ø–µ—Ä–≤–æ–≥–æ –±–æ—Ç–∞" if event.chat_id == first_bot.id else "–≤—Ç–æ—Ä–æ–≥–æ –±–æ—Ç–∞" if event.chat_id == second_bot.id else "—Ç—Ä–µ—Ç—å–µ–≥–æ –±–æ—Ç–∞"
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {bot_name} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ: {event.message.text} (ID: {event.message.id})")
        await handle_message_logic(event, client)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π –æ—Ç –≤—Å–µ—Ö –±–æ—Ç–æ–≤
    @client.on(events.NewMessage(chats=[first_bot, second_bot, third_bot], pattern=r'(?:–í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è üëè –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ|üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –∑–∞–¥–∞–Ω–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –∑–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ!)'))
    @client.on(events.MessageEdited(chats=[first_bot, second_bot, third_bot], pattern=r'(?:–í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è üëè –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ|üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –∑–∞–¥–∞–Ω–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –∑–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ!)'))
    async def handle_task_completed(event):
        print(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ handle_task_completed –≤—ã–∑–≤–∞–Ω –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ —Å api_id {api_id}")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–º–æ–∫ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        async with account_locks[api_id]:
            if api_id in processed_accounts:
                print(f"–ê–∫–∫–∞—É–Ω—Ç —Å api_id {api_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –ø—Ä–æ–ø—É—Å–∫")
                return

            bot_name = "–ø–µ—Ä–≤–æ–≥–æ –±–æ—Ç–∞" if event.chat_id == first_bot.id else "–≤—Ç–æ—Ä–æ–≥–æ –±–æ—Ç–∞" if event.chat_id == second_bot.id else "—Ç—Ä–µ—Ç—å–µ–≥–æ –±–æ—Ç–∞"
            print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {bot_name}: {event.message.text}")
            print("–í—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞...")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–µ—Ä–≤–æ–≥–æ –±–æ—Ç–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
            first_bot_balance = "0"
            for attempt in range(3):
                try:
                    await client.send_message(first_bot, "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
                    await asyncio.sleep(2)  # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
                    async for message in client.iter_messages(first_bot, limit=1):
                        balance_match = re.search(r'üí∞ –ë–∞–ª–∞–Ω—Å: (.+)', message.text)
                        if balance_match:
                            balance_str = balance_match.group(1)
                            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ –æ—Ç –Ω–µ—á–∏—Å–ª–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ‚≠êÔ∏è)
                            cleaned_balance = re.sub(r'[^\d.]', '', balance_str)
                            first_bot_balance = cleaned_balance
                            print(f"–ë–∞–ª–∞–Ω—Å –ø–µ—Ä–≤–æ–≥–æ –±–æ—Ç–∞: {first_bot_balance}")
                            break
                    else:
                        print(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –ë–∞–ª–∞–Ω—Å –ø–µ—Ä–≤–æ–≥–æ –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        continue
                    break
                except FloodWaitError as e:
                    wait_time = e.seconds
                    print(f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram, –æ–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–≤–æ–º—É –±–æ—Ç—É")
                    await asyncio.sleep(wait_time)
            else:
                print("–ë–∞–ª–∞–Ω—Å –ø–µ—Ä–≤–æ–≥–æ –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –≤—Ç–æ—Ä–æ–≥–æ –±–æ—Ç–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
            second_bot_stars = "0"
            for attempt in range(3):
                try:
                    await client.send_message(second_bot, "üéÅ –í—ã–≤–µ—Å—Ç–∏ –ó–≤—ë–∑–¥—ã")
                    await asyncio.sleep(2)  # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
                    async for message in client.iter_messages(second_bot, limit=1):
                        stars_match = re.search(r'–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: (.+)', message.text)
                        if stars_match:
                            stars_str = stars_match.group(1)
                            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ –æ—Ç –Ω–µ—á–∏—Å–ª–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
                            cleaned_stars = re.sub(r'[^\d.]', '', stars_str)
                            second_bot_stars = cleaned_stars
                            print(f"–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—Ç–æ—Ä–æ–≥–æ –±–æ—Ç–∞: {second_bot_stars}")
                            break
                    else:
                        print(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—Ç–æ—Ä–æ–≥–æ –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                        continue
                    break
                except FloodWaitError as e:
                    wait_time = e.seconds
                    print(f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram, –æ–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Ç–æ—Ä–æ–º—É –±–æ—Ç—É")
                    await asyncio.sleep(wait_time)
            else:
                print("–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—Ç–æ—Ä–æ–≥–æ –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ —Ç—Ä–µ—Ç—å–µ–≥–æ –±–æ—Ç–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
            third_bot_balance = "0"
            for attempt in range(3):
                try:
                    await client.send_message(third_bot, "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
                    await asyncio.sleep(2)  # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
                    async for message in client.iter_messages(third_bot, limit=1):
                        balance_match = re.search(r'üí∞ –ë–∞–ª–∞–Ω—Å: (.+)', message.text)
                        if balance_match:
                            balance_str = balance_match.group(1)
                            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ –æ—Ç –Ω–µ—á–∏—Å–ª–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ‚≠êÔ∏è)
                            cleaned_balance = re.sub(r'[^\d.]', '', balance_str)
                            third_bot_balance = cleaned_balance
                            print(f"–ë–∞–ª–∞–Ω—Å —Ç—Ä–µ—Ç—å–µ–≥–æ –±–æ—Ç–∞: {third_bot_balance}")
                            break
                    else:
                        print(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –ë–∞–ª–∞–Ω—Å —Ç—Ä–µ—Ç—å–µ–≥–æ –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        continue
                    break
                except FloodWaitError as e:
                    wait_time = e.seconds
                    print(f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram, –æ–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç—Ä–µ—Ç—å–µ–º—É –±–æ—Ç—É")
                    await asyncio.sleep(wait_time)
            else:
                print("–ë–∞–ª–∞–Ω—Å —Ç—Ä–µ—Ç—å–µ–≥–æ –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫")

            # –°—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤
            try:
                total_balance = float(first_bot_balance) + float(second_bot_stars) + float(third_bot_balance)
                print(f"–û–±—â–∏–π –±–∞–ª–∞–Ω—Å –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ —Å api_id {api_id}: {total_balance}")
            except ValueError:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–æ–≤: {first_bot_balance} + {second_bot_stars} + {third_bot_balance}")
                total_balance = 0.0

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –ø–æ–º–µ—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
            account_results.append((api_id, total_balance))
            processed_accounts.add(api_id)
            print(f"–ê–∫–∫–∞—É–Ω—Ç —Å api_id {api_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –¥–æ–±–∞–≤–ª–µ–Ω –≤ processed_accounts")
            await client.disconnect()

    # –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å", "–ó–∞–ø—É—Å—Ç–∏—Ç–µ" –∏–ª–∏ "–î–æ–±–∞–≤—å—Ç–µ"
    @client.on(events.NewMessage(chats=[first_bot, second_bot, third_bot], pattern=r'(?:^|\n)(–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å|–ó–∞–ø—É—Å—Ç–∏—Ç–µ|–î–æ–±–∞–≤—å—Ç–µ).*'))
    async def handle_subscription_message(event):
        await handle_message_logic(event, client)

    # –û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    async def handle_message_logic(event, client):
        bot_name = "–ø–µ—Ä–≤–æ–≥–æ –±–æ—Ç–∞" if event.chat_id == first_bot.id else "–≤—Ç–æ—Ä–æ–≥–æ –±–æ—Ç–∞" if event.chat_id == second_bot.id else "—Ç—Ä–µ—Ç—å–µ–≥–æ –±–æ—Ç–∞"
        print(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è {bot_name}: {event.message.text}")
        message = event.message
        if not message.reply_markup:
            print("–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç –∫–Ω–æ–ø–æ–∫")
            return

        buttons = message.reply_markup.rows[0].buttons if message.reply_markup.rows else []
        print(f"–ù–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–æ–∫: {len(buttons)}")
        if len(buttons) < 2:
            print("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–Ω–æ–ø–æ–∫")
            return

        first_button = buttons[0]
        second_button = buttons[1]

        if not isinstance(first_button, KeyboardButtonUrl):
            print("–ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–µ URL")
            return

        link = first_button.url
        print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏: {link}")
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å—Å—ã–ª–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä ?start= –∏–ª–∏ ?startgroup=
            start_param_match = re.match(r'https?://t\.me/[^?]+\?(start|startgroup)=.+', link)
            if start_param_match:
                param_type = start_param_match.group(1)
                if param_type == 'startgroup':
                    print(f"–ü—Ä–æ–ø—É—Å–∫ —Å—Å—ã–ª–∫–∏ {link}: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
                    return
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —é–∑–µ—Ä–Ω–µ–π–º –∏–∑ —Å—Å—ã–ª–∫–∏
                username_match = re.match(r'https?://t\.me/([^?]+)\?start=.+', link)
                if username_match:
                    username = f"@{username_match.group(1)}"
                    entity = await client.get_entity(username)
                    if hasattr(entity, 'bot') and entity.bot:
                        await client.send_message(entity, '/start')
                        print(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø–æ —Å—Å—ã–ª–∫–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º: {link}")
                    else:
                        print(f"–°—É—â–Ω–æ—Å—Ç—å {link} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –±–æ—Ç–æ–º")
                else:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —é–∑–µ—Ä–Ω–µ–π–º –∏–∑ —Å—Å—ã–ª–∫–∏: {link}")
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Å—ã–ª–∫–∞ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–æ–π (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å +)
                invite_match = re.match(r'https?://t\.me/\+(.+)', link)
                if invite_match:
                    invite_hash = invite_match.group(1)
                    try:
                        await client(ImportChatInviteRequest(invite_hash))
                        print(f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –∫–∞–Ω–∞–ª—É/–≥—Ä—É–ø–ø–µ –ø–æ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–µ: {link}")
                    except FloodWaitError as e:
                        wait_time = e.seconds
                        print(f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram, –æ–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å—Å—ã–ª–∫–∏ {link}")
                        await asyncio.sleep(wait_time)
                        try:
                            await client(ImportChatInviteRequest(invite_hash))
                            print(f"–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –∫–∞–Ω–∞–ª—É/–≥—Ä—É–ø–ø–µ –ø–æ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–µ: {link}")
                        except Exception as e2:
                            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–µ {link}: {e2}")
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–µ {link}: {e}")
                else:
                    # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –±–æ—Ç–∞
                    entity = await client.get_entity(link)
                    print(f"–¢–∏–ø —Å—É—â–Ω–æ—Å—Ç–∏: {type(entity).__name__}")
                    if isinstance(entity, Channel):
                        await client(JoinChannelRequest(channel=entity))
                        print(f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª: {link}")
                    elif hasattr(entity, 'bot') and entity.bot:
                        await client.send_message(entity, '/start')
                        print(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞: {link}")
                    else:
                        print(f"–ü—Ä–æ–ø—É—Å–∫ —Å—Å—ã–ª–∫–∏: {link} - –Ω–µ –∫–∞–Ω–∞–ª –∏–ª–∏ –±–æ—Ç")
        except ValueError as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—É—â–Ω–æ—Å—Ç–∏ {link}: {e}")
            try:
                channel_username = re.match(r'https?://t\.me/(.+)', link)
                if channel_username and not channel_username.group(1).startswith('+'):
                    channel_username = channel_username.group(1)
                    entity = await client.get_entity(channel_username)
                    if isinstance(entity, Channel):
                        await client(JoinChannelRequest(channel=entity))
                        print(f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É: {link}")
                    else:
                        print(f"–°—É—â–Ω–æ—Å—Ç—å {link} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–∞–Ω–∞–ª–æ–º")
            except Exception as e2:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏ –∫–∞–∫ —é–∑–µ—Ä–Ω–µ–π–º–∞: {e2}")
        except Exception as e:
            print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å —Å—Å—ã–ª–∫–æ–π {link}: {e}")

        # –≠–º—É–ª—è—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –≤—Ç–æ—Ä—É—é –∫–Ω–æ–ø–∫—É
        print(f"–≠–º—É–ª—è—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è –≤—Ç–æ—Ä–æ–π –∫–Ω–æ–ø–∫–∏: {second_button.text if not isinstance(second_button, KeyboardButtonUrl) else second_button.url}")
        try:
            await message.click(1)  # –ù–∞–∂–∏–º–∞–µ–º –≤—Ç–æ—Ä—É—é –∫–Ω–æ–ø–∫—É (–∏–Ω–¥–µ–∫—Å 1)
            print("–í—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞")
            await asyncio.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –≤—Ç–æ—Ä–æ–π –∫–Ω–æ–ø–∫–∏: {e}")
            if isinstance(second_button, KeyboardButtonUrl):
                await client.send_message(event.chat, second_button.url)
            else:
                await client.send_message(event.chat, second_button.text)
            print("–í—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —á–µ—Ä–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫—É —Ç–µ–∫—Å—Ç–∞")

    print(f"–û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç {first_bot_username}, {second_bot_username} –∏ {third_bot_username} –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ —Å api_id {api_id}...")
    return client, first_bot, second_bot, third_bot

async def main():
    global account_results, processed_accounts
    # –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –∑–∞–ø—É—Å–∫–æ–º
    account_results.clear()
    processed_accounts.clear()

    # –ß—Ç–µ–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
    credentials = read_credentials()
    if not credentials:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        return

    for cred in credentials:
        api_id = cred.get('api_id')
        api_hash = cred.get('api_hash')
        session_string = cred.get('session_string')
        if not all([api_id, api_hash, session_string]):
            print(f"–ù–µ–ø–æ–ª–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞: {cred}. –ü—Ä–æ–ø—É—Å–∫.")
            continue

        print(f"\n–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å api_id: {api_id}")
        client, first_bot, second_bot, third_bot = await process_account(api_id, api_hash, session_string)
        if client and first_bot and second_bot and third_bot:
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
            await client.run_until_disconnected()
        else:
            print(f"–ü—Ä–æ–ø—É—Å–∫ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å api_id: {api_id} –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")

    # –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤
    grand_total = 0.0
    print("\n–ò—Ç–æ–≥–æ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã –ø–æ –≤—Å–µ–º –∞–∫–∫–∞—É–Ω—Ç–∞–º:")
    for api_id, balance in account_results:
        print(f"–ê–∫–∫–∞—É–Ω—Ç —Å api_id {api_id}: {balance}")
        grand_total += balance
    print(f"–û–±—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ –≤—Å–µ–º –∞–∫–∫–∞—É–Ω—Ç–∞–º: {grand_total}")
    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

async def run_forever():
    while True:
        print("\n–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
        await main()
        print("–û–∂–∏–¥–∞–Ω–∏–µ 50 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—É—Å–∫–æ–º...")
        await asyncio.sleep(50)

if __name__ == '__main__':
    asyncio.run(run_forever())